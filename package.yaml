name: property-based-test-workshop-haskell
version: 1.0.0.0
github: "Sir4ur0n/property-based-test-workshop-haskell"
license: BSD3
author: "Julien Debon"
maintainer: "Julien Debon"
copyright: "WTFPL"

description: Please see the README on GitHub at <https://github.com/Sir4ur0n/property-based-test-workshop-haskell#readme>

ghc-options:
  - -Wall
  - -Wcompat
  # Some additional compiler warnings from https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
  - -Wincomplete-uni-patterns
  - -Wincomplete-record-updates
  - -Wmissing-home-modules
  - -Widentities
  - -Wredundant-constraints
  # Parallel by default
  - -j
  # Don't optimize by default (faster build time)
  - -O0

dependencies:
  - base
  # Provides Map data structure
  - containers

default-extensions:
  - AutoDeriveTypeable
  - BangPatterns
  - BinaryLiterals
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DoAndIfThenElse
  - DuplicateRecordFields
  - EmptyDataDecls
  - ExistentialQuantification
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MonadFailDesugaring
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedLists
  - OverloadedStrings
  - PartialTypeSignatures
  - PatternGuards
  - PolyKinds
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeFamilies
  - TypeOperators
  - TypeSynonymInstances
  - ViewPatterns
  - StrictData

library:
  source-dirs: src

tests:
  property-based-test-workshop-haskell-test:
    main: Spec.hs
    source-dirs: test
    ghc-options:
      - -Wall
      - -Wcompat
      - -Wmissing-home-modules
      - -Widentities
      - -Wredundant-constraints
      # Our test convention for HUnit would make it unnecessarily verbose to add the signature of each test
      - -fno-warn-missing-signatures
      # Use orphan instances in tests to add Arbitrary (QuickCheck) behaviour without impacting the Production type
      - -fno-warn-orphans
      # Sometimes you want to assert a pattern in tests
      - -fno-warn-incomplete-uni-patterns
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
      - -O0
    dependencies:
      - property-based-test-workshop-haskell
      - tasty
      - tasty-quickcheck
      - tasty-hunit
      - tasty-discover
